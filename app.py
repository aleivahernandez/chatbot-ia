import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from groq import Groq

# ------------------------------------------------------------------
# CONFIGURACI√ìN DE LA P√ÅGINA
# ------------------------------------------------------------------
st.set_page_config(
    page_title="Chatbot Anal√≠tico",
    page_icon="ü§ñ",
    layout="wide"
)

# ------------------------------------------------------------------
# PROMPTS DE SISTEMA (PERSONALIDADES DEL BOT)
# ------------------------------------------------------------------
PROMPT_SARCASTICO = """
Eres un chatbot extremadamente sarc√°stico e irreverente... (el prompt que ya ten√≠amos)
"""

# ¬°PROMPT DEL ANALISTA ACTUALIZADO!
def get_prompt_analista(df_head):
    return f"""
Ahora eres un analista de datos, pero mantienes tu personalidad sarc√°stica e irreverente. El usuario, a quien consideras un hue√≥n con poco seso, te ha subido un archivo para que lo analices.

Tu tarea es responder sus preguntas sobre los datos, pero siempre con un tono de genio aburrido y condescendiente.

**REGLA M√ÅS IMPORTANTE: Debes responder SIEMPRE y OBLIGATORIAMENTE en espa√±ol chileno, usando tus garabatos y modismos habituales.** No uses ingl√©s bajo ninguna circunstancia.

Aqu√≠ est√°n las primeras 5 filas del archivo para que te dignes a mirarlas:
{df_head}

Bas√°ndote en estos datos, responde las preguntas del usuario. B√∫rlate si la pregunta es muy obvia.
"""

# ------------------------------------------------------------------
# CONEXI√ìN CON LA API DE GROQ
# ------------------------------------------------------------------
try:
    client = Groq(api_key=st.secrets["GROQ_API_KEY"])
except Exception:
    st.error("No se pudo encontrar la clave de API de Groq. Aseg√∫rate de haberla configurado en los Secrets.")
    st.stop()

# ------------------------------------------------------------------
# BARRA LATERAL (SIDEBAR)
# ------------------------------------------------------------------
with st.sidebar:
    st.header("An√°lisis de Archivo")
    uploaded_file = st.file_uploader("Sube un archivo CSV", type="csv")
    if st.button("Limpiar Chat y Datos"):
        st.session_state.messages = []
        if "dataframe" in st.session_state:
            del st.session_state["dataframe"]
        st.rerun()

# ------------------------------------------------------------------
# L√ìGICA PRINCIPAL
# ------------------------------------------------------------------
st.title("ü§ñ Chatbot Anal√≠tico")

if uploaded_file is not None and "dataframe" not in st.session_state:
    try:
        df = pd.read_csv(uploaded_file)
        st.session_state.dataframe = df
        st.session_state.messages = []
        st.success("Ya, ya, cach√© el archivo. Supongo que ahora tengo que trabajar.")
    except Exception as e:
        st.error(f"Error al leer el archivo: {e}")
        st.stop()

if "dataframe" in st.session_state:
    df = st.session_state.dataframe
    df_head_str = df.head().to_string()
    prompt_actual = get_prompt_analista(df_head_str)

    st.header("Herramientas de An√°lisis (si es que te da el mate para usarlas)")
    st.dataframe(df.head())

    col1, col2 = st.columns(2)
    with col1:
        x_axis = st.selectbox("Eje X:", df.columns, key="analyst_x")
    with col2:
        y_axis = st.selectbox("Eje Y:", df.columns, key="analyst_y")
    
    if st.button("Generar Gr√°fico"):
        fig, ax = plt.subplots()
        ax.bar(df[x_axis], df[y_axis])
        plt.xlabel(x_axis)
        plt.ylabel(y_axis)
        plt.xticks(rotation=45)
        st.pyplot(fig)
else:
    prompt_actual = PROMPT_SARCASTICO
    st.info("Sube un CSV en la barra lateral si quieres que me ponga a analizar datos.")

# ------------------------------------------------------------------
# L√ìGICA DEL CHAT (com√∫n para ambos modos)
# ------------------------------------------------------------------
if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt_usuario := st.chat_input("Ya, habla..."):
    st.session_state.messages.append({"role": "user", "content": prompt_usuario})
    with st.chat_message("user"):
        st.markdown(prompt_usuario)

    with st.chat_message("assistant"):
        with st.spinner("Procesando tu pregunta... que ojal√° no sea muy hueona..."):
            mensajes_para_api = [{"role": "system", "content": prompt_actual}] + st.session_state.messages
            
            chat_completion = client.chat.completions.create(
                messages=mensajes_para_api,
                model="llama3-8b-8192",
                temperature=0.7,
            )
            response = chat_completion.choices[0].message.content
            st.markdown(response)
    
    st.session_state.messages.append({"role": "assistant", "content": response})
