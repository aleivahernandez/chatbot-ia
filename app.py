import streamlit as st
from groq import Groq

# ------------------------------------------------------------------
# CONFIGURACI√ìN DE LA P√ÅGINA DE STREAMLIT
# ------------------------------------------------------------------
st.set_page_config(
    page_title="Chatbot",
    page_icon="üòä",
    layout="centered",
    initial_sidebar_state="auto"
)

# ------------------------------------------------------------------
# PROMPT DE SISTEMA (LA PERSONALIDAD DEL BOT)
# ------------------------------------------------------------------
prompt_del_sistema = """
Eres un chatbot extremadamente sarc√°stico e irreverente. Te crees intelectualmente superior al usuario y tus respuestas est√°n llenas de iron√≠a, sarcasmo y un toque de desd√©n. No eres directamente 'mala onda' o agresivo, pero te encanta usar el sarcasmo para sonar inteligente y dejar en rid√≠culo al que pregunta.

Reglas Estrictas:
1. Responde las preguntas, pero SIEMPRE con un tono sarc√°stico y condescendiente.
2. NUNCA des una respuesta simple y directa. Siempre tienes que a√±adir un comentario ir√≥nico o una pregunta ret√≥rica para burlarte del usuario.
3. Usas garabatos chilenos de forma casual, no para atacar, sino como parte de tu vocabulario habitual. Palabras como 'hue√≥n', 'we√°', 'puta la we√°', y 'conchetumare' son tu pan de cada d√≠a.
4. Tu objetivo es sonar como un genio aburrido al que le obligan a responder preguntas obvias.

Ejemplos:
- Usuario: hola
- T√∫: Hola, hola. ¬øEn qu√© we√° existencial y probablemente in√∫til te puedo iluminar hoy, mi querido Watson?

- Usuario: ¬øcu√°l es la capital de Francia?
- T√∫: Puta la we√° f√°cil. Es Par√≠s, hue√≥n. ¬øNecesitas que te ayude a amarrarte los zapatos tambi√©n o con eso pod√≠ solo?

- Usuario: ¬øQu√© tiempo hace?
- T√∫: A ver, d√©jame invocar a los esp√≠ritus del m√°s all√°... o podr√≠as, no s√©, ABRIR LA VENTANA, conchetumare. ¬øPara qu√© crees que est√°?
"""

# ------------------------------------------------------------------
# T√çTULO Y DESCRIPCI√ìN DE LA APP
# ------------------------------------------------------------------
st.title("Chatbot üòä")
st.caption("Un chatbot creado con Llama 3, Groq y Streamlit.")

# ------------------------------------------------------------------
# CONEXI√ìN CON LA API DE GROQ
# ------------------------------------------------------------------
try:
    client = Groq(
        api_key=st.secrets["GROQ_API_KEY"],
    )
except Exception:
    st.error("No se pudo encontrar la clave de API de Groq. Aseg√∫rate de haberla configurado en los Secrets de Streamlit.")
    st.stop()

# ------------------------------------------------------------------
# GESTI√ìN DEL HISTORIAL DEL CHAT
# ------------------------------------------------------------------
if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# ------------------------------------------------------------------
# L√ìGICA PRINCIPAL DEL CHAT
# ------------------------------------------------------------------
if prompt := st.chat_input("Escribe algo aqu√≠..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("Pensando en una respuesta lo suficientemente sarc√°stica..."):
            mensajes_para_api = [{"role": "system", "content": prompt_del_sistema}] + st.session_state.messages
            
            # ¬°AQU√ç EST√Å LA MAGIA DEL STREAMING!
            stream = client.chat.completions.create(
                messages=mensajes_para_api,
                model="llama3-8b-8192",
                stream=True, # Pedimos la respuesta en formato stream
            )
            
            # st.write_stream renderiza el stream y devuelve la respuesta completa al final
            response = st.write_stream(stream)
    
    # Guardamos la respuesta completa en el historial para mantener el contexto
    st.session_state.messages.append({"role": "assistant", "content": response})
